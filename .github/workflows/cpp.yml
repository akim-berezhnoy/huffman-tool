name: C++ CI

on:
  pull_request

jobs:
  formatting-check:
    name: Formatting check
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Check line breaks
        run: |
          sudo apt-get install -y dos2unix
          pushd $GITHUB_WORKSPACE
          ci-extra/check-lines.sh
          popd
      - name: Run clang-format style check for C/C++/Protobuf programs.
        uses: jidicula/clang-format-action@v4.9.0
        with:
          clang-format-version: '15'
          check-path: '.'

  test:
    needs: formatting-check
    name: Tests in ${{ matrix.build_type }} with ${{ matrix.compilerSetter }}
    runs-on: ubuntu-22.04
    container:
      image: ubuntu:23.04
      options: --privileged
    env:
      DEBIAN_FRONTEND: noninteractive
      CI_RUN: 1
      NO_DEBUG: 1
    strategy:
      matrix:
        build_type: [Release, Debug, SanitizedDebug, RelWithDebInfo]
        # clang-15 uses dwarf-5 which valgrind doesn't support yet
        compilerSetter: [
          gcc-13 g++-13,
          clang-16 clang++-16
        ]
    defaults:
      run:
        shell: bash

    steps:
      - name: Setup dependencies
        run: |
          apt-get update
          apt-get install -y gpg wget
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null \
            | gpg --dearmor - \
            | tee /usr/share/keyrings/kitware-archive-keyring.gpg \
            >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' \
            | tee /etc/apt/sources.list.d/kitware.list >/dev/null

          apt-get update
          apt-get install -y git build-essential binutils g++-13 gcc-13 clang-16 clang++-16 libc++abi-16-dev libc++-16-dev libstdc++-13-dev cmake \
            ninja-build curl zip unzip tar pkg-config kitware-archive-keyring gdb python3 python3-requests time 
          cd ..
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          cd $GITHUB_WORKSPACE

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Update tests
        run: |
          chown root:root .
          git config --global user.name "John Doe"
          git config --global user.email johndoe@example.com
          source ci-extra/set-upstream.sh
          git remote add upstream "https://github.com/$UPSTREAM_REPO.git"
          git fetch upstream master
          if git merge-base --is-ancestor upstream/master @; then
            echo 'Tests are already up to date.'
            echo 'TESTS_UPDATED=0' >> $GITHUB_ENV
          else
            echo 'Updating tests...'
            git rebase upstream/master
            echo 'Tests updated.'
            echo 'TESTS_UPDATED=1' >> $GITHUB_ENV
          fi

      - name: Build main
        run: ci-extra/build.sh ${{ matrix.build_type }} ${{ matrix.compilerSetter }}

      - name: Test main
        run: |
          if [[ ${{ env.TESTS_UPDATED }} -eq 1 ]]; then
            echo -ne '\e[0;33mWARNING: Tests were not updated on your side. '
            echo -e 'This script will however run the most recent version.\e[0m'
          fi
          if [[ ${{ matrix.build_type }} == "SanitizedDebug" ]]; then
            ASAN_OPTIONS=alloc_dealloc_mismatch=0 ci-extra/test.sh ${{ matrix.build_type }}
          else
            ci-extra/test.sh ${{ matrix.build_type }}
          fi

      - if: ${{ matrix.build_type == 'RelWithDebInfo' }}
        name: Test main with valgrind
        run: |
          cd ..
          wget https://sourceware.org/pub/valgrind/valgrind-3.21.0.tar.bz2
          tar xvf valgrind-3.21.0.tar.bz2
          cd valgrind-3.21.0
          ./configure
          make
          make install
          cd $GITHUB_WORKSPACE
          ci-extra/test-valgrind.sh

      - if: ${{ matrix.build_type == 'Release' }}
        name: Integration tests
        run: |
          python3 -m unittest integration-tests/tests.py
